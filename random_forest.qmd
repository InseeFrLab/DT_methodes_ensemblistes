---
title: "La forêt aléatoire"
author: |
  [Mélina Hillion](https://github.com/melinahillion)
  [Olivier Meslin](https://github.com/oliviermeslin)
format:
  ams-typst: default
  typst:
    toc: true
    section-numbering: 1.1.1
bibliography: references.bib
---
  
```{=typst} 
#import "@preview/mitex:0.2.4": *
#set math.equation(
numbering: "(1)",
supplement: none
)
```

# La forêt aléatoire

La forêt aléatoire (_random forests_) est une méthode d'apprentissage automatique supervisé qui combine plusieurs arbres de décision pour former un modèle d'ensemble plus performant et robuste/stable que les arbres individuels (Breiman en 2001).

L'idée des forêts aléatoires est de tirer parti de la diversité entre les arbres pour réduire la variance du modèle final. 


### Guide d'entraînement des RF

#### Les hyperparamètres de la _random forest_

| Hyperparamètre                                                      | Description                                                                 |
|---------------------------------------------------------------------|-----------------------------------------------------------------------------|
| `mtry`                                                              | Le nombre de variables candidates à chaque noeud                            |
| `replacement`                                                       | L'échantillonnage des données se fait-il avec ou sans remise?        |
| `sample.fraction`                                                   | Le taux d'échantillonnage des données             |
| `min.node.size`                                                     | Nombre minimal d'observations nécessaire pour qu'un noeud puisse être partagé  |
| `num.trees`                                                         | Le nombre d'arbres                                                          |
| `splitrule`                                                   | Le critère de choix de la règle de division des noeuds intermédiaires            |
| `min.bucket`                                                   | Nombre minimal d'observations dans les noeuds terminaux             |
| `max.depth`                                                   | Profondeur maximale des arbres             |

: Les principaux hyperparamètres des forêts aléatoires {tbl-colwidths="[25,80]"}

Dans ce tableau, le nom des hyperparamètres est celui figurant dans le _package_ `R` `ranger`. Il arrive qu'ils portent un nom différents dans d'autres implémentations des _random forests_, mais il est généralement facile de s'y retrouver en lisant attentivement la documentation.

__IMPORTANT: ne pas oublier de mettre les noms des arguments XGBRFRegressor dans le commentaire détaillé des hyperparamètres des RF.__
Bien dire que la source première est @probst2019hyperparameters.

#### Quels sont les effets des hyperparamètres sur la performance de la forêt aléatoire?

Comme indiqué dans la partie __REFERENCE A AJOUTER__, la performance prédictive d'une forêt aléatoire varie en fonction de deux critères essentiels: elle croît avec le pouvoir prédictif moyen des arbres, et décroît avec la corrélation entre les arbres. La recherche d'arbres très prédictifs pouvant aboutir à augmenter la corrélation entre eux, l'objectif de l'entraînement d'une forêt aléatoire revient à trouver le meilleur arbitrage possible entre pouvoir prédictif et corrélation. Voici comment la performance de la forêt aléatoire varie en fonction des principaux hyperparamètres:

- Le nombre de variables candidates à chaque noeud (`mtry`) est l'hyperparamètre qui a le plus fort effet sur la performance de la forêt aléatoire. Une valeur plus basse aboutit à des arbres plus différents et donc moins corrélés (car ils reposent sur des variables différentes), mais ces arbres peuvent être peu performants car ils reposent sur des variables peu pertinentes. Inversement, une valeur plus élevée du nombre de variables candidates aboutit à des arbres plus performants, mais plus corrélés. C'est en particulier le cas si seulement certaines variables sont très prédictives, car ce sont ces variables qui apparaitront dans la plupart des arbres.

- Le plan d'échantillonnage (`replacement` et `sample.fraction`) a des effets similaires à ceux du nombre de variables candidates, mais dans une moindre ampleur. Un taux d'échantillonnage plus faible aboutit à des arbres plus différents et donc moins corrélés (car ils sont entraînés sur des échantillons très différents), mais ces arbres peuvent être peu performants car entraînés sur des échantillons de petite taille. Inversement, un taux d'échantillonnage élevé aboutit à des arbres plus performants mais plus corrélés. Les effets de l'échantillonnage avec ou sans remise sur la performance de la forêt aléatoire sont moins clairs et ne font pas consensus. Les travaux les plus récents suggèrent toutefois qu'il est préférable d'échantillonner sans remise (@probst2019hyperparameters).

- Le nombre minimal d'observations dans les noeuds terminaux (`min.node.size`): la plupart des implémentations des forêts aléatoires retiennent une valeur faible par défaut (entre 1 et 5 observations par noeud terminal). Certaines études suggèrent qu'augmenter ce nombre peut parfois améliorer les performances, mais ce point ne fait pas consensus. En revanche, il est certain que le temps d'entraînement décroît fortement avec cet hyperparamètre: une valeur faible implique des arbres très profonds, avec un grand nombre de noeuds. Il peut donc être utile de fixer ce nombre à une valeur plus élevée pour accélérer l'entraînement, en particulier si les données sont volumineuses.

- Le nombre d'arbres (`num.trees`) est un hyperparamètre particulier car il n'est associé à aucun arbitrage: la performance de la forêt aléatoire croît avec le nombre d'arbres, puis se stabilise à un niveau approximativement constant. Le nombre optimal d'arbres est donc intuitivement celui à partir duquel la performance de la forêt ne croît plus (ce point est détaillé plus bas). Il est important de noter que ce nombre optimal dépend des autres hyperparamètres. Par exemple, un taux d'échantillonnage faible et un nombre faible de variables candidates à chaque noeud aboutissent à des arbres peu corrélés, mais peu performants, ce qui requiert probablement un plus grand nombre d'arbres.

- Le critère de choix de la règle de division des noeuds intermédiaires (`splitrule`): la plupart des implémentations des forêts aléatoires retiennent par défaut l'impureté de Gini pour la classification et la variance pour la régression, même si d'autres critères de choix ont été proposés dans la littérature. A ce stade, aucun critère de choix ne paraît systématiquement supérieur aux autres en matière de performance. Le lecteur intéressé pourra se référer à la discussion détaillée dans @probst2019hyperparameters.

#### Comment entraîner une forêt aléatoire?





